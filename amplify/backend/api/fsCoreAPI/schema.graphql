type User
	@model(queries: null, mutations: null, subscriptions: null) {
	id: ID!
	firstName: String!
	lastName: String!
	username: String!
	email: AWSEmail!
	avatar: String
	sharedProjects: [ID!]
	watchedTasks: [ID!]
	assignedTasks: [ID!]
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	owner: String!
}

type Project
	@model(queries: null, mutations: null, subscriptions: null)
	@key(name: "byOwner", fields: ["owner"]) {
	id: ID!
	prevProject: ID
	nextProject: ID
	permalink: String!
	title: String
	tasksCount: Int!
	todoCount: Int!
	pendingCount: Int!
	doneCount: Int!
	privacy: ProjectPrivacy!
	permissions: Permissions!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	owner: String!
}

type Task
	@model(queries: null, mutations: null, subscriptions: null)
	@key(name: "byOwner", fields: ["owner"])
	@key(name: "byProject", fields: ["projectID"]) {
	id: ID!
	projectID: ID!
	prevTask: ID
	nextTask: ID
	permalink: Int!
	task: String!
	description: String
	due: AWSTimestamp
	tags: [String!]
	status: TaskStatus!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	owner: String!
	watchers: [String!]
	assignees: [String!]
}

type Comment
	@model(queries: null, mutations: null, subscriptions: null)
	@key(name: "byOwner", fields: ["owner"])
	@key(name: "byTask", fields: ["taskID"]) {
	id: ID!
	taskID: ID!
	content: AWSJSON!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	owner: String!
}

type Mutation {
	createProject(input: CreateProjectInput!): Project
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	createTask(input: CreateTaskInput!): Task
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	createComment(input: CreateCommentInput!): Comment
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	updateProject(input: UpdateProjectInput!): Project
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	updateTask(input: UpdateTaskInput!): Task
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	updateComment(input: UpdateCommentInput!): Comment
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	deleteProjectAndTasks(projectID: ID!): Project
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	deleteTaskAndComments(taskId: ID!): Task
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	deleteComment(commentID: ID!): Comment
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	assignTask(taskID: ID!, assignee: String!): Task
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	unassignTask(taskID: ID!, assignee: String!): Task
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	importData(data: String!): ImportedProjectsList
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
}

type Query {
	getUserByID(userID: ID!): User
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	getProjectByID(projectID: ID!): Project
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	getProjectByPermalink(permalink: String!): Project
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	listOwnedProjects: ProjectsList
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	listAssignedProjects: ProjectsList
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	listTasksForProject(projectID: ID!): TasksList
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	listCommentsForTask(taskID: ID!): CommentsList
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
}

type Subscription {
	onCreateOwnedProject(owner: String!): Project
		@aws_subscribe(mutations: ["createProject"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onImportOwnedProjects(owner: String!): ImportedProjectsList
		@aws_subscribe(mutations: ["importData"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onUpdateOwnedProject(owner: String!): Project
		@aws_subscribe(mutations: ["updateProject"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDeleteOwnedProject(owner: String!): Project
		@aws_subscribe(mutations: ["deleteProjectAndTasks"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onAssignTask(assignee: String!): Task
		@aws_subscribe(mutations: ["assignTask"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDisallowTask(assignee: String!): Task
		@aws_subscribe(mutations: ["unassignTask"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onUpdateAssignedTaskByProjectID(projectID: ID!, assignee: String!): Task
		@aws_subscribe(mutations: ["updateTask"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDeleteAssignedTaskByProjectID(projectID: ID!, assignee: String!): Task
		@aws_subscribe(mutations: ["deleteTaskAndComments"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onCreateOwnedTaskByProjectID(projectID: ID!): Task
		@aws_subscribe(mutations: ["createTask"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onUpdateOwnedTaskByProjectID(projectID: ID!): Task
		@aws_subscribe(mutations: ["updateTask", "assignTask", "unassignTask"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDeleteOwnedTaskByProjectID(projectID: ID!): Task
		@aws_subscribe(mutations: ["deleteTaskAndComments"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onCreateCommentByTaskID(taskID: ID!): Comment
		@aws_subscribe(mutations: ["createComment"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onUpdateCommentByTaskID(taskID: ID!): Comment
		@aws_subscribe(mutations: ["updateComment"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
	onDeleteCommentByTaskID(taskID: ID!): Comment
		@aws_subscribe(mutations: ["deleteComment"])
		@function(name: "fsCoreApiResolver-${env}")
		@aws_iam
		@aws_cognito_user_pools
}

input CreateProjectInput {
	prevProject: ID
	nextProject: ID
	permalink: String!
	privacy: ProjectPrivacy!
	permissions: Permissions!
	members: [String!]
	title: String
}

input CreateTaskInput {
	projectID: ID!
	prevTask: ID
	nextTask: ID
	task: String!
	description: String
	due: AWSTimestamp
	tags: [String!]
	status: TaskStatus
}

input CreateCommentInput {
	taskID: ID!
	content: AWSJSON!
}

input UpdateProjectInput {
	id: ID!
	prevProject: ID
	nextProject: ID
	permalink: String
	privacy: ProjectPrivacy
	title: String
}

input UpdateTaskInput {
	id: ID!
	prevTask: ID
	nextTask: ID
	task: String
	description: String
	due: AWSTimestamp
	tags: [String!]
	status: TaskStatus
}

input UpdateCommentInput {
	id: ID!
	content: AWSJSON
}

type ProjectsList {
	items: [Project!]
}

type ImportedProjectsList {
	owner: String!
	items: [Project!]
}

type TasksList {
	items: [Task!]
}

type CommentsList {
	items: [Comment!]
}

enum TaskStatus {
	todo
	pending
	done
}

enum ProjectPrivacy {
	public
	private
}

enum Permissions {
	r
	rw
}