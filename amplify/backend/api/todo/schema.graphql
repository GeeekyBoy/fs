type Project
  @model(mutations: null, subscriptions: null)
  @auth(rules: [
    { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    { allow: owner, ownerField: "assignees", operations: [read] },
  ]) {
  id: ID!
  permalink: String!
  title: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Note
  @model(mutations: null, subscriptions: null)
  @key(name: "byOwner", fields: ["owner"])
  @key(name: "byProject", fields: ["projectID"])
@auth(rules: [
    { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    { allow: owner, ownerField: "assignees", operations: [read] },
  ]) {
	id: ID!
	projectID: ID!
	note: String!
	isDone: Boolean!
	task: String
	description: String
	steps: String
	due: String
	watcher: String
	tag: [String]
	sprint: String
	status: String
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	owner: String!
	assignees: [String!]!
}

type Comment
  @model(mutations: null, subscriptions: null)
  @key(name: "byNote", fields: ["noteID"])
  @auth(rules: [
    { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    { allow: owner, ownerField: "assignees", operations: [read] },
  ]) {
  id: ID!
  noteID: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Subscription {
  onCreateCommentByNoteId(noteID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
}

type Mutation {
  createProject(input: CreateProjectInput!): Project
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  createNote(input: CreateNoteInput!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  createComment(input: CreateCommentInput!): Comment
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  deleteProjectAndNotes(projectID: ID!): Project
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  deleteNoteAndComments(noteId: ID!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  deleteComment(commentID: ID!): Comment
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  assignNote(noteID: ID! assignee: String!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  disallowNote(noteID: ID! assignee: String!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
}

type Query {
  listNotesForProject(projectID: ID!): NotesList
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  listCommentsForNote(noteID: ID!): CommentsList
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
}

input CreateProjectInput {
	id: ID
	permalink: String!
	title: String!
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	owner: String!
}

input CreateNoteInput {
	id: ID
	projectID: ID!
	note: String!
	isDone: Boolean!
	task: String
	description: String
	steps: String
	due: String
	watcher: String
	tag: [String]
	sprint: String
	status: String
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	owner: String!
	assignees: [String!]
}

input CreateCommentInput {
	id: ID
	noteID: ID!
	content: String!
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	owner: String!
}

type NotesList {
  items: [Note!]
}

type CommentsList {
  items: [Comment!]
}

type RemovalResponse {
  id: ID!
}
