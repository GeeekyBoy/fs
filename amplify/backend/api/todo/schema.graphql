type Project
  @model
  @auth(rules: [
    { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    { allow: owner, ownerField: "assignees", operations: [read] },
  ])
  @key(fields: ["id"])
  @key(name: "ByPermalink", fields: ["permalink"]) {
  id: ID!
  permalink: String!
  title: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
  assignees: [String!]
}

type Note
  @model(mutations: null)
  @key(name: "byProject", fields: ["projectID"]) @auth(rules: [
    { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    { allow: owner, ownerField: "assignees", operations: [read] },
  ]) {
	id: ID
	projectID: ID!
	note: String!
	isDone: Boolean!
	task: String
	description: String
	steps: String
	due: String
	watcher: String
	tag: [String]
	sprint: String
	status: String
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
	owner: String!
	assignees: [String!]!
}

type Comment
  @model
  @key(name: "byNote", fields: ["noteID"]) @auth(rules: [
    { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    { allow: owner, ownerField: "assignees", operations: [read] },
  ]) {
  id: ID!
  noteID: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
  assignees: [String!]
}

type Subscription {
  onCreateCommentByNoteId(noteID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
  onUpdateCommentByNoteId(noteID: ID!): Comment
    @aws_subscribe(mutations: ["updateComment"])
  onDeleteCommentByNoteId(noteID: ID!): Comment
    @aws_subscribe(mutations: ["deleteComment"])
  onCreateNoteByProjectId(projectID: ID!): Note
    @aws_subscribe(mutations: ["createNote"])
  onUpdateNoteByProjectId(projectID: ID!): Note
    @aws_subscribe(mutations: ["updateNote"])
  onDeleteNoteByProjectId(projectID: ID!): Note
    @aws_subscribe(mutations: ["deleteNote"])
}

type Mutation {
  @aws_cognito_user_pools
  createNote(input: Note!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
  @aws_cognito_user_pools
  deleteNoteAndComments(noteId: ID!): RemovalResponse
    @function(name: "graphqlresolver-${env}")
  @aws_iam
}

type RemovalResponse {
  id: ID!
}