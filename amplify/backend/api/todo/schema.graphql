type Project
  @model(queries: null, mutations: null, subscriptions: null)
  @key(name: "ByOwner", fields: ["owner"]) {
  id: ID!
  permalink: String!
  title: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Note
  @model(queries: null, mutations: null, subscriptions: null)
  @key(name: "byOwner", fields: ["owner"])
  @key(name: "byAssignee", fields: ["assignee"])
  @key(name: "byProject", fields: ["projectID"]) {
	id: ID!
	projectID: ID!
	note: String!
	isDone: Boolean!
	task: String
	description: String
	steps: String
	due: AWSTimestamp
	watcher: String
	tag: [String!]
	sprint: String
	status: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
	owner: String!
	assignee: String!
}

type Comment
  @model(queries: null, mutations: null, subscriptions: null)
  @key(name: "byNote", fields: ["noteID"]) {
  id: ID!
  noteID: ID!
  content: AWSJSON!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Subscription {
  onCreateCommentByNoteId(noteID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
}

type Mutation {
  createProject(input: CreateProjectInput!): Project
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  createNote(input: CreateNoteInput!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  createComment(input: CreateCommentInput!): Comment
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  updateProject(input: UpdateProjectInput!): Project
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  updateNote(input: UpdateNoteInput!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  updateComment(input: UpdateCommentInput!): Comment
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  deleteProjectAndNotes(projectID: ID!): Project
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  deleteNoteAndComments(noteId: ID!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  deleteComment(commentID: ID!): Comment
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  assignNote(noteID: ID! assignee: String!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  disallowNote(noteID: ID! assignee: String!): Note
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
}

type Query {
  getProjectByID(projectID: ID!): Project
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  getProjectByPermalink(permalink: String!): Project
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  listOwnedProjects: ProjectsList
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  listAssignedProjects: ProjectsList
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  listNotesForProject(projectID: ID!): NotesList
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
  listCommentsForNote(noteID: ID!): CommentsList
    @function(name: "graphqlresolver-${env}")
    @aws_iam
    @aws_cognito_user_pools
}

input CreateProjectInput {
	permalink: String!
	title: String!
}

input CreateNoteInput {
	projectID: ID!
	note: String!
	isDone: Boolean!
	task: String
	description: String
	steps: String
	due: AWSTimestamp
	watcher: String
	tag: [String!]
	sprint: String
	status: String
}

input CreateCommentInput {
	noteID: ID!
	content: AWSJSON!
}

input UpdateProjectInput {
	permalink: String
	title: String
}

input UpdateNoteInput {
	note: String
	isDone: Boolean
	task: String
	description: String
	steps: String
	due: AWSTimestamp
	watcher: String
	tag: [String!]
	sprint: String
	status: String
}

input UpdateCommentInput {
	content: AWSJSON
}

type ProjectsList {
  items: [Project!]
}

type NotesList {
  items: [Note!]
}

type CommentsList {
  items: [Comment!]
}
