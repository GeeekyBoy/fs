type Project @model @auth(rules: [
    { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    { allow: owner, ownerField: "assignees", operations: [read] },
  ])
  @key(fields: ["id"])
  @key(name: "ByPermalink", fields: ["permalink"]) {
  id: ID!
  permalink: String!
  title: String!
  notes: [Note] @connection(keyName: "byProject", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
  assignees: [String!]
}

type Note @model @key(name: "byProject", fields: ["projectID"]) @auth(rules: [
    { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
    { allow: owner, ownerField: "assignees", operations: [read] },
  ]) {
  id: ID!
  projectID: ID!
  note: String!
  isDone: Boolean!
  task: String
  description: String
  steps: String
  due: String
  assigned: String
  watcher: String
  project: String
  tag: [String]
  sprint: String
  status: String
  comments: [Comment] @connection(keyName: "byNote", fields: ["id"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
  assignees: [String!]
}

type Comment @model @key(name: "byNote", fields: ["noteID"]) @auth(rules: [{allow: owner}]) {
  id: ID!
  noteID: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String!
}

type Subscription {
  onCreateCommentByNoteId(noteID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
  onUpdateCommentByNoteId(noteID: ID!): Comment
    @aws_subscribe(mutations: ["updateComment"])
  onDeleteCommentByNoteId(noteID: ID!): Comment
    @aws_subscribe(mutations: ["deleteComment"])
}
